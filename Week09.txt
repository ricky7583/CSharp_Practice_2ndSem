Q8) find out what is the oldest date that we hired any employee
(mind you i am not asking who we hired earliest)
am asking when (what is the date) that we hired somebody ealiest?

SELECT min(hire_date) from employees

Q9) find out what is the oldest date that we hired any employee in department 80
(mind you i am not asking who we hired earliest)
am asking when (what is the date) that we hired somebody ealiest in department 80

SELECT min(hire_date) from employees WHERE department_id=80

SELECT min(hire_date) from employees WHERE department_id=90

Q10) show us earliest hired_date for each departments

SELECT department_id, min(hire_date)
from employees
GROUP by department_id
ORDER BY department_id

Select * from orders

Q11) show us each customer level and their total shipcost amount (breakdown at customer#)
SELECT customer#, sum(shipcost)
FROM orders
GROUP BY customer#

select last_name, job_id,salary from employees
Q12)

a) High level finding total salary at company level
SELECT sum(salary) from employees
b) High level total salary at department 80
SELECT sum(salary) from employees WHERE department_id=70
c)Break down per department_id (showing each department_id , and their total salary)
SELECT department_id, sum(salary)
FROM employees
GROUP BY department_id
order by department_id

d)1 level -Break down per job_id (showing each department_id , and their total salary)

SELECT job_id, sum(salary)
FROM employees
GROUP BY job_id
order by job_id

e) 2 two levels of breakdown
Categorize under each department and each job_id and show us each job code earn how much total
under each department

SELECT department_id, job_id, sum(salary)
FROM employees
GROUP BY department_id, job_id
order by department_id, job_id


c- again ) this time all the total will be ROLL UP
Break down per department_id (showing each department_id , and their total salary) and ROLLUP

SELECT department_id, sum(salary)
FROM employees
GROUP BY ROLLUP ( department_id)
order by department_id

select sum(salary) from employees -- 9,838,262.08

e - redo again with ROLLUP) 2 two levels of breakdown
Categorize under each department and each job_id and show us each job code earn how much total
under each department

SELECT department_id, job_id, sum(salary)
FROM employees
GROUP BY ROLLUP (department_id, job_id)
order by department_id, job_id

Q13)
a) High level total salary for department 80
SELECT sum(salary) from employees WHERE department_id=80
b) High level total salary for department 70
SELECT sum(salary) from employees WHERE department_id=70
d) High level total salary for department 50
SELECT sum(salary) from employees WHERE department_id=50

or
c) below query will combine all employees in department 50 or 70 or 80
SELECT sum(salary) FROM employees
WHERE department_id IN (50, 70,80)

d) or for each different department level but only for 50, 70 and 80 (break down but only for few deprtment_id)

SELECT department_id, sum(salary) FROM employees
WHERE department_id IN (50, 70,80)
GROUP BY department_id

e) it is great you did and show us 50, 70 and 80 their total but even among these result
our boss only wants to see department which their total salary is greater than 400,000

SELECT department_id, sum(salary) FROM employees
WHERE department_id IN (50, 70,80)
GROUP BY department_id
HAVING sum(salary)> 400000

question : who earns more salary than Douglas Grant

SELECT * FROM employees
WHERE salary = (SELECT salary FROM employees WHERE first_name='Douglas' and last_name='Grant')


question : who earns more salary than person last name King-- result will be multople records so use IN to compare.

SELECT * FROM employees
WHERE salary IN (SELECT salary FROM employees WHERE last_name='King')

if result from subquery returns only one result fine you can use = , >= , <=, < , != but multiple records always
use IN





SELECT employee_id, last_name FROM employees
WHERE salary (SELECT MIN(salary)
FROM employees
GROUP BY department_id);



P1. List the book title and retail price for all books with a retail price lower than the average
retail price of all books sold by JustLee Books.

select title, retail
from books WHERE retail < (SELECT avg(retail) FROM books )

SELECT department_id, sum(salary) FROM employees
WHERE department_id IN (50, 70,80)
GROUP BY department_id
HAVING

P1. List the book title and retail price for all books with a retail price lower than the average
retail price of all books sold by JustLee Books.

select title, retail
from books WHERE retail < (SELECT avg(retail) FROM books )


Problem 2:
Determine which orders were shipped to the same state as order 1014.

SELECT * from orders WHERE shipstate = (SELECT shipstate from orders WHERE order#=1014)