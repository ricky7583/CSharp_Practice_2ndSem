SELECT * FROM employees
WHERE UPPER(first_name) = 'DONALD' - it does not work

SELECT * FROM employees
WHERE UPPER(first_name) = UPPER('DONALD') - Yes this works
WHERE UPPER(first_name) = UPPER('DoNaLD') - Yes this works

SELECT * FROM employees
WHERE LOWER(first_name) = 'donald'

SELECT LOWER('HEY TODAY') FROM DUAL - This will amke everything lower
INITCAP - First letter is capital

SELECT SUBSTR('HEY TODAY',1,7) FROM DUAL - HEY TOD

-list first 3 digits of each employees' last name
SELECT last_name, SUBSTR ( last_name , 1, 3 ) FROM employees

INSTR (column or 'string' , searching character) -- 
-this will find first occurance of that character
처음 대상의 글자가 몇 자 뒤에 있는지 확인. 글자가 없으면 0

SELECT mailaddress, INSTR (mailaddress, '.') FROM email
james.curry => 6
SELECT mailaddress, SUBSTR(mailaddress, 1, INSTR(mailaddress, '.')-1) FROM email2


SELECT mailaddress, SUBSTR(mailaddress, 1, INSTR(mailaddress, '.')-1) as firstname ,
SUBSTR(mailaddress, INSTR(mailaddress, '.')+1 , (INSTR(mailaddress, '@') - INSTR(mailaddress, '.') )-1 )
FROM email2
first name and last name seperated

CONCAT function : to combine two character values. first name and last together
it only accept 2 different values .. Not much flexible

SELECT first_name, last_name FROM employees

SELECT CONCAT ( first_name , last_name ) FROM employees -- only two fields
SELECT CONCAT ( first_name , last_name, phone_number) FROM employees -- this will not work as it provide 3 fields

We suggest to use || ( pipe pipe) to combine as many as character values

SELECT first_name || last_name||phone_number|| salary FROM employees ---good but not good enough

SELECT first_name || ' ' || last_name || ' ' || phone_number|| ' ' || salary FROM employees

SELECT 'Hi how are you' || ' today is wednesday' FROM DUAL

=====
REPLACE

SELECT ('Hi, how are you! today is wednesday' ) FROM DUAL

SELECT REPLACE ('Hi, how are you! today is wednesday' , '!' ,'?') FROM DUAL

NUMBER functions


SELECT 34.56 FROM DUAL
--- i want to see xxxx.1 digit with rounding
SELECT ROUND(34.56,1) FROM DUAL --> 34.6

SELECT ROUND(34.42,1) FROM DUAL --> 34.4

SELECT ROUND(34.42,2) FROM DUAL --> 34.42

SELECT TRUNC (34.42,1) FROM DUAL --> 34.4

SELECT TRUNC (34.42,0) FROM DUAL --> 34 

